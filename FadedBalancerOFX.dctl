// FadedBalancerOFX v1.3.1
// Corrective RGB rebalance for faded / color‑shifted film scans.
//
// Important (human-friendly): this file contains short, plain-language explanations
// targeted at colorists and film-restoration practitioners. Maintainer-only
// background research is private; contact the project owner for maintainer notes
// when deeper rationale is required. Public documentation is intentionally
// minimal and does not link to private research.
//
// Pipeline (per-pixel): 
//   1) Optional PRESET pre-transform (apply film-stock suggestions to the original pixel)
//   2) Global adjustments (Offset / Shadows / Midtones / Highlights)
//   3) Fade correction (contrast/saturation nudge for faded scans)
//   4) Per-channel adjustments (Offset / Shadows / Midtones / Highlights)
//   5) Channel mixing (Darken/Lighten composites)
//   6) Channel copy/replace
//   7) Channel removal & final output mapping (optional Cineon)
//
// Notes for colorists:
// - "Preserve Luminance" rescales RGB after per-channel work so that perceived
//   brightness stays similar — useful when rebalancing channels to remove magenta
//   casts. See the background doc for guidance on when to enable this.
// - Presets are non-destructive suggestions applied only to local copies before
//   processing; they give a good starting point for known faded stocks but do not
//   overwrite Inspector sliders. See the background doc for the stock notes.
//
#// --- Preset identifiers & selector (Eastman Color 1 / Eastman Color 2 / Eastman Color 3..5)
#define PRESET_NONE      0
#define PRESET_EASTMAN1  1
#define PRESET_EASTMAN2  2
#define PRESET_EASTMAN3  3
#define PRESET_EASTMAN4  4
#define PRESET_EASTMAN5  5

DEFINE_UI_PARAMS(presetMode, Preset, DCTLUI_COMBO_BOX, 0, { PRESET_NONE, PRESET_EASTMAN1, PRESET_EASTMAN2, PRESET_EASTMAN3, PRESET_EASTMAN4, PRESET_EASTMAN5 }, { None, Eastman Color 1, Eastman Color 2, Eastman Color 3, Eastman Color 4, Eastman Color 5 })
// (presetBlend removed — presets apply directly to local copies before processing)


// === UI PARAMETERS ===

// Global controls
DEFINE_UI_PARAMS(fadeCorrection, ✨ Fade Correction, DCTLUI_SLIDER_FLOAT, 0.0f, 0.0f, 1.0f, 0.001f)
DEFINE_UI_PARAMS(globalOffset,   🌐 Global Offset,   DCTLUI_SLIDER_FLOAT, 0.0f, -0.5f, 0.5f, 0.001f)
DEFINE_UI_PARAMS(globalShadows,  🌑 Global Shadows,  DCTLUI_SLIDER_FLOAT, 0.0f, -0.5f, 0.5f, 0.001f)
DEFINE_UI_PARAMS(globalMidtones, 🌓 Global Midtones, DCTLUI_SLIDER_FLOAT, 1.0f,  0.1f, 3.0f, 0.001f)
DEFINE_UI_PARAMS(globalHighlights, 🌕 Global Highlights, DCTLUI_SLIDER_FLOAT, 1.0f, 0.1f, 3.0f, 0.001f)
DEFINE_UI_PARAMS(preserveLuminance, ⚖️ Preserve Luminance, DCTLUI_CHECK_BOX, 0)

// Per‑channel controls
DEFINE_UI_PARAMS(redOffset,     🔴 Red Offset,     DCTLUI_SLIDER_FLOAT, 0.0f, -0.5f, 0.5f, 0.001f)
DEFINE_UI_PARAMS(redShadows,    🔴 Red Shadows,    DCTLUI_SLIDER_FLOAT, 0.0f, -0.5f, 0.5f, 0.001f)
DEFINE_UI_PARAMS(redMidtones,   🔴 Red Midtones,   DCTLUI_SLIDER_FLOAT, 1.0f,  0.1f, 3.0f, 0.001f)
DEFINE_UI_PARAMS(redHighlights, 🔴 Red Highlights, DCTLUI_SLIDER_FLOAT, 1.0f,  0.1f, 3.0f, 0.001f)
DEFINE_UI_PARAMS(greenOffset,     🟢 Green Offset,     DCTLUI_SLIDER_FLOAT, 0.0f, -0.5f, 0.5f, 0.001f)
DEFINE_UI_PARAMS(greenShadows,    🟢 Green Shadows,    DCTLUI_SLIDER_FLOAT, 0.0f, -0.5f, 0.5f, 0.001f)
DEFINE_UI_PARAMS(greenMidtones,   🟢 Green Midtones,   DCTLUI_SLIDER_FLOAT, 1.0f,  0.1f, 3.0f, 0.001f)
DEFINE_UI_PARAMS(greenHighlights, 🟢 Green Highlights, DCTLUI_SLIDER_FLOAT, 1.0f,  0.1f, 3.0f, 0.001f)
DEFINE_UI_PARAMS(blueOffset,     🔵 Blue Offset,     DCTLUI_SLIDER_FLOAT, 0.0f, -0.5f, 0.5f, 0.001f)
DEFINE_UI_PARAMS(blueShadows,    🔵 Blue Shadows,    DCTLUI_SLIDER_FLOAT, 0.0f, -0.5f, 0.5f, 0.001f)
DEFINE_UI_PARAMS(blueMidtones,   🔵 Blue Midtones,   DCTLUI_SLIDER_FLOAT, 1.0f,  0.1f, 3.0f, 0.001f)
DEFINE_UI_PARAMS(blueHighlights, 🔵 Blue Highlights, DCTLUI_SLIDER_FLOAT, 1.0f,  0.1f, 3.0f, 0.001f)

// Channel mixing (darken/lighten composites)
DEFINE_UI_PARAMS(redDarkenWith,   🔴🌙 Red Darken,   DCTLUI_COMBO_BOX, 0, { RDW_NONE, RDW_GREEN, RDW_BLUE }, { None, With Green, With Blue })
DEFINE_UI_PARAMS(redLightenWith,  🔴☀️ Red Lighten,  DCTLUI_COMBO_BOX, 0, { RLW_NONE, RLW_GREEN, RLW_BLUE }, { None, With Green, With Blue })
DEFINE_UI_PARAMS(greenDarkenWith, 🟢🌙 Green Darken, DCTLUI_COMBO_BOX, 0, { GDW_NONE, GDW_RED, GDW_BLUE }, { None, With Red, With Blue })
DEFINE_UI_PARAMS(greenLightenWith, 🟢☀️ Green Lighten, DCTLUI_COMBO_BOX, 0, { GLW_NONE, GLW_RED, GLW_BLUE }, { None, With Red, With Blue })
DEFINE_UI_PARAMS(blueDarkenWith,  🔵🌙 Blue Darken,  DCTLUI_COMBO_BOX, 0, { BDW_NONE, BDW_RED, BDW_GREEN }, { None, With Red, With Green })
DEFINE_UI_PARAMS(blueLightenWith, 🔵☀️ Blue Lighten, DCTLUI_COMBO_BOX, 0, { BLW_NONE, BLW_RED, BLW_GREEN }, { None, With Red, With Green })

// Replace / removal / output
DEFINE_UI_PARAMS(copyRedSource,   🔴↔ Replace Red,   DCTLUI_COMBO_BOX, 0, { CR_NONE, CR_FROM_GREEN, CR_FROM_BLUE }, { None, With Green, With Blue })
DEFINE_UI_PARAMS(copyGreenSource, 🟢↔ Replace Green, DCTLUI_COMBO_BOX, 0, { CG_NONE, CG_FROM_RED, CG_FROM_BLUE }, { None, With Red, With Blue })
DEFINE_UI_PARAMS(copyBlueSource,  🔵↔ Replace Blue,  DCTLUI_COMBO_BOX, 0, { CB_NONE, CB_FROM_RED, CB_FROM_GREEN }, { None, With Red, With Green })
DEFINE_UI_PARAMS(channelRemovalMode, 🗑️ Channel Removal, DCTLUI_COMBO_BOX, 0, { REM_NONE, REM_RED, REM_GREEN, REM_BLUE, REM_ALL }, { None, Remove Red, Remove Green, Remove Blue, Remove All })
DEFINE_UI_PARAMS(outputToCineon, 🎞️ Output to Cineon Log, DCTLUI_CHECK_BOX, 0)


// === HELPERS ===

// TODO (docs/examples): small, safe examples for editors/AI agents.
// These are non-functional comments to show typical patterns used in this file.
// 1) Midtones (gamma) example using safe_pow (use in a local transform or helper):
//    // make midtones vector from a single UI slider
//    float3 midtones = make_float3(globalMidtones_l, globalMidtones_l, globalMidtones_l);
//    rgb.x = safe_pow(rgb.x, 1.0f / midtones.x);
//    rgb.y = safe_pow(rgb.y, 1.0f / midtones.y);
//    rgb.z = safe_pow(rgb.z, 1.0f / midtones.z);
// 2) Mix (darken) example (pure min):
//    rgb.x = _fminf(rgb.x, rgb.y); // red = min(red, green)
// Notes: Keep comments as examples only — do not change pipeline order or UI names.

// Optional UI tooltips (Resolve 19.1+). These are enabled below to show concise,
// user-facing guidance for colorists. They are intentionally brief—contact the
// project owner for maintainer-only background rationale.
// Enable these to expose short-help in the DCTL UI (uncommented on purpose):
DEFINE_UI_TOOLTIP(fadeCorrection, "Soft contrast & saturation boost for faded scans. Contact project owner for maintainer notes.")
DEFINE_UI_TOOLTIP(preserveLuminance, "Rescale RGB after per-channel work to keep perceived brightness. Contact project owner for maintainer notes.")
DEFINE_UI_TOOLTIP(outputToCineon, "Simple Cineon-style log output for film inspection. Contact project owner for maintainer notes.")
DEFINE_UI_TOOLTIP(globalMidtones, "Global midtone gamma. Small changes rebalance faded palettes. Contact project owner for maintainer notes.")



// HELPERS (plain-language explanations)
// The helper functions below are small, GPU-safe building blocks. Each has a
// short, non-technical description for colorists so you can reason about
// what the operation does without needing to read GPU code. For deeper,
// maintainer-only rationale contact the project owner (private notes).

// Developer mapping: which helper relates to conceptual ideas (maintainer-only).
// - safe_pow             -> Power-law / per-channel gamma
// - applyLGGO            -> Offset/Shadows/Midtones/Highlights pattern
// - applyFadeCorrection  -> Soft contrast & saturation recovery pattern
// - linearToCineon       -> Film-log / inspection helper
// Contact the project owner for exact background section mappings.

// safe_pow: safe per-channel gamma/exponentiation. Use this when changing
// midtones so that extremely dark pixels don't produce math errors. In practice
// this implements the power-law correction described in the background doc.
// Uses _powf for GPU-friendly exp and clamps the base to a tiny positive value.
__DEVICE__ float safe_pow(float x, float y) { return _powf(_fmaxf(x, 1e-9f), y); }

// applyLGGO: Friendly description: "Offset, Shadows, Midtones, Highlights"
// A simple, tonal-pass helper that applies small additive offsets (useful to fix
// color casts in shadows), a shadow lift, a midtone gamma, and a highlight gain.
// This mirrors the common colorist workflow: lift, gamma, gain. See the
// background doc for why per-channel midtone exponents are used for faded film.
// Parameters:
//   col       - input color
//   offset    - per-channel additive offset
//   shadows   - per-channel shadow adjustment (additive)
//   midtones  - per-channel midtone exponent (1.0 = neutral)
//   highlights- per-channel multiplicative highlight scale (1.0 = neutral)
__DEVICE__ float3 applyLGGO(float3 col, float3 offset, float3 shadows, float3 midtones, float3 highlights) {
    col += offset;
    col += shadows;
    col.x = safe_pow(col.x, 1.0f / midtones.x);
    col.y = safe_pow(col.y, 1.0f / midtones.y);
    col.z = safe_pow(col.z, 1.0f / midtones.z);
    col *= highlights;
    return col;
}

// applyFadeCorrection:
// Friendly summary: a gentle contrast and saturation nudge tuned for faded
// materials. Faded film often needs a midtone contrast lift and a subtle
// saturation recovery; this function implements that behavior and re-scales
// the result to preserve perceived brightness.
__DEVICE__ float3 applyFadeCorrection(float3 col, float fadeCorrection) {
    if (fadeCorrection > 0.0f) {
        float luma = col.x * 0.2126f + col.y * 0.7152f + col.z * 0.0722f;
        // smooth contrast curve (ease-in/out)
        float contrastedLuma = luma * luma * (3.0f - 2.0f * luma);
        float finalLuma = _mix(luma, contrastedLuma, fadeCorrection);
        float3 lumaColor = make_float3(luma, luma, luma);
        // simple saturation amount: 1.0 = neutral, >1 increases color punch
        float satAmount = 1.0f + fadeCorrection;
        float3 saturatedCol = _mix(lumaColor, col, satAmount);
        col = _mix(col, saturatedCol, fadeCorrection);
        float newLuma = col.x * 0.2126f + col.y * 0.7152f + col.z * 0.0722f;
        if (newLuma > 1e-9f) col *= finalLuma / newLuma;
    }
    return col;
}

// linearToCineon: converts a linear value to Cineon-style log range.
// Friendly summary: outputs a simple film-log representation useful for film
// inspection and matching. Negative or zero input is clamped to 0.0 to avoid
// NaNs/infinities on GPU. Refer to the background doc for usage guidance when
// comparing with film scans or Cineon-referenced material.
__DEVICE__ float linearToCineon(float linear) {
    if (linear <= 0.0f) return 0.0f;
    // keep original formula but clamp result to [0,1]
    float mapped = (1023.0f * (0.30102999566 * _log10f(linear * 0.9f) + 0.66666666667)) / 1023.0f;
    return _fmaxf(0.0f, _fminf(mapped, 1.0f));
}


// === MAIN TRANSFORM === (signature as required by Resolve)
__DEVICE__ float4 transform(int p_Width, int p_Height, int p_X, int p_Y, float p_R, float p_G, float p_B, float p_A) {
    // Preserve incoming pixel
    float3 rgb = make_float3(p_R, p_G, p_B);

    // --- local copies of UI params (presets only modify these)
    float fadeCorrection_l    = fadeCorrection;
    float globalOffset_l      = globalOffset;
    float globalShadows_l     = globalShadows;
    float globalMidtones_l    = globalMidtones;
    float globalHighlights_l  = globalHighlights;
    float preserveLuminance_l = preserveLuminance;

    float redOffset_l     = redOffset;     float redShadows_l    = redShadows;    float redMidtones_l   = redMidtones;   float redHighlights_l   = redHighlights;
    float greenOffset_l   = greenOffset;   float greenShadows_l  = greenShadows;  float greenMidtones_l = greenMidtones; float greenHighlights_l = greenHighlights;
    float blueOffset_l    = blueOffset;    float blueShadows_l   = blueShadows;   float blueMidtones_l  = blueMidtones;  float blueHighlights_l  = blueHighlights;

    // local copies for combo / copy / removal / output so presets can suggest them:
    int redDarkenWith_l    = redDarkenWith;
    int redLightenWith_l   = redLightenWith;
    int greenDarkenWith_l  = greenDarkenWith;
    int greenLightenWith_l = greenLightenWith;
    int blueDarkenWith_l   = blueDarkenWith;
    int blueLightenWith_l  = blueLightenWith;

    int copyRedSource_l    = copyRedSource;
    int copyGreenSource_l  = copyGreenSource;
    int copyBlueSource_l   = copyBlueSource;

    int channelRemovalMode_l = channelRemovalMode;
    int outputToCineon_l     = (outputToCineon > 0.5f) ? 1 : 0;

    // --- PRESSET PRE-TRANSFORM (apply BEFORE any Global adjustments)
    // prepare preset pre-transform candidates (defaults = no-op)
    int preset_applied = 0;
    float preset_fade = 0.0f;

    float p_globalOffset = 0.0f;
    float p_globalShadows = 0.0f;
    float p_globalMidtones = 1.0f;
    float p_globalHighlights = 1.0f;

    float p_redOffset = 0.0f;   float p_redShadows = 0.0f;   float p_redMidtones = 1.0f;   float p_redHighlights = 1.0f;
    float p_greenOffset = 0.0f; float p_greenShadows = 0.0f; float p_greenMidtones = 1.0f; float p_greenHighlights = 1.0f;
    float p_blueOffset = 0.0f;  float p_blueShadows = 0.0f;  float p_blueMidtones = 1.0f;  float p_blueHighlights = 1.0f;

    int p_blueDarkenWith = BDW_NONE;
    int p_outputToCineon = 0;

    // define presets as pre-transform suggestions (do NOT overwrite UI *_l)
    if (presetMode == PRESET_EASTMAN1) {
        preset_applied = 1;
        p_globalShadows = 0.074f;
        p_globalMidtones = 1.000f;
        p_globalHighlights = 0.864f;
        preset_fade = 0.0f;

        p_redOffset = -0.081f; p_redShadows = 0.213f; p_redMidtones = 0.347f; p_redHighlights = 1.067f;
        p_greenOffset = 0.0f;   p_greenShadows = 0.0f;   p_greenMidtones = 1.0f;   p_greenHighlights = 1.0f;
        p_blueOffset = -0.043f; p_blueShadows = 0.0f;    p_blueMidtones = 0.887f;  p_blueHighlights = 1.0f;
    }

    if (presetMode == PRESET_EASTMAN2) {
        preset_applied = 1;
        p_globalShadows = 0.019f;
        p_globalMidtones = 1.000f;
        p_globalHighlights = 0.977f;
        preset_fade = 0.0f;

        p_redOffset = -0.221f; p_redShadows = 0.012f; p_redMidtones = 0.684f; p_redHighlights = 1.494f;
        p_greenOffset = 0.0f;  p_greenShadows = 0.0f;  p_greenMidtones = 1.0f;   p_greenHighlights = 1.0f;
        p_blueOffset = 0.0f;   p_blueShadows = 0.0f;   p_blueMidtones = 0.640f;  p_blueHighlights = 1.291f;

        p_blueDarkenWith = BDW_GREEN;
        p_outputToCineon = 0;
    }

    if (presetMode == PRESET_EASTMAN3) {
        preset_applied = 1;
        p_globalShadows = 0.053f;
        p_globalMidtones = 1.000f;
        p_globalHighlights = 1.045f;
        preset_fade = 0.485f;

        p_redOffset = 0.0f; p_redShadows = -0.303f; p_redMidtones = 0.430f; p_redHighlights = 2.670f;
        p_greenOffset = 0.0f; p_greenShadows = 0.0f; p_greenMidtones = 1.0f; p_greenHighlights = 1.0f;
        p_blueOffset = 0.0f; p_blueShadows = -0.038f; p_blueMidtones = 1.0f; p_blueHighlights = 1.067f;

        p_blueDarkenWith = BDW_GREEN;
        p_outputToCineon = 0;
    }

    if (presetMode == PRESET_EASTMAN4) {
        preset_applied = 1;
        p_globalShadows = 0.0f;
        p_globalMidtones = 1.000f;
        p_globalHighlights = 1.045f;
        preset_fade = 0.485f;

        p_redOffset = 0.0f; p_redShadows = -0.303f; p_redMidtones = 0.430f; p_redHighlights = 2.670f;
        p_greenOffset = 0.0f; p_greenShadows = 0.0f; p_greenMidtones = 1.0f; p_greenHighlights = 1.0f;
        p_blueOffset = 0.0f; p_blueShadows = -0.043f; p_blueMidtones = 1.0f; p_blueHighlights = 1.067f;

        p_blueDarkenWith = BDW_GREEN;
        p_outputToCineon = 0;
    }

    if (presetMode == PRESET_EASTMAN5) {
        preset_applied = 1;
        p_globalShadows = 0.043f;
        p_globalMidtones = 1.000f;
        p_globalHighlights = 1.134f;
        preset_fade = 0.558f;

        p_redOffset = 0.0f; p_redShadows = 0.0f; p_redMidtones = 0.302f; p_redHighlights = 1.269f;
        p_greenOffset = 0.0f; p_greenShadows = 0.0f; p_greenMidtones = 1.0f; p_greenHighlights = 1.0f;
        p_blueOffset = 0.0f; p_blueShadows = -0.038f; p_blueMidtones = 1.0f; p_blueHighlights = 1.0f;

        p_blueDarkenWith = BDW_GREEN;
        p_outputToCineon = 0;
    }

    // Apply preset pre-transform to original pixel first (if any preset selected).
    if (preset_applied) {
        // apply global-style preset pass first
        rgb = applyLGGO(rgb,
            make_float3(p_globalOffset, p_globalOffset, p_globalOffset),
            make_float3(p_globalShadows, p_globalShadows, p_globalShadows),
            make_float3(p_globalMidtones, p_globalMidtones, p_globalMidtones),
            make_float3(p_globalHighlights, p_globalHighlights, p_globalHighlights));

        // apply per-channel preset pass
        rgb = applyLGGO(rgb,
            make_float3(p_redOffset, p_greenOffset, p_blueOffset),
            make_float3(p_redShadows, p_greenShadows, p_blueShadows),
            make_float3(p_redMidtones, p_greenMidtones, p_blueMidtones),
            make_float3(p_redHighlights, p_greenHighlights, p_blueHighlights));

        // ensure fadeCorrection includes preset fade suggestion (preset first)
        fadeCorrection_l = _fmaxf(fadeCorrection_l, preset_fade);

        // if preset suggests a mixing/copy/output change, apply as initial suggestions
        if (p_blueDarkenWith != BDW_NONE) blueDarkenWith_l = p_blueDarkenWith;
        if (p_outputToCineon != 0) outputToCineon_l = p_outputToCineon;
    }

    // --- 1. Global Adjust (allowed to change luminance)
    rgb = applyLGGO(rgb,
        make_float3(globalOffset_l, globalOffset_l, globalOffset_l),
        make_float3(globalShadows_l, globalShadows_l, globalShadows_l),
        make_float3(globalMidtones_l, globalMidtones_l, globalMidtones_l),
        make_float3(globalHighlights_l, globalHighlights_l, globalHighlights_l));

    // --- 2. Fade Correction
    rgb = applyFadeCorrection(rgb, fadeCorrection_l);

    // Capture luma before per-channel adjustments for optional preservation.
    float preChannelLuma = rgb.x * 0.2126f + rgb.y * 0.7152f + rgb.z * 0.0722f;

    // --- 3. Per-Channel Adjust (optionally preserve luminance after this stage)
    rgb = applyLGGO(rgb,
        make_float3(redOffset_l, greenOffset_l, blueOffset_l),
        make_float3(redShadows_l, greenShadows_l, blueShadows_l),
        make_float3(redMidtones_l, greenMidtones_l, blueMidtones_l),
        make_float3(redHighlights_l, greenHighlights_l, blueHighlights_l));
    if (preserveLuminance_l > 0.5f) {
        float postChannelLuma = rgb.x * 0.2126f + rgb.y * 0.7152f + rgb.z * 0.0722f;
        if (postChannelLuma > 1e-9f) rgb *= preChannelLuma / postChannelLuma;
    }

    // --- 4. Mixing (Darken / Lighten) — use local combo copies
    if (redDarkenWith_l == RDW_GREEN) rgb.x = _fminf(rgb.x, rgb.y); else if (redDarkenWith_l == RDW_BLUE) rgb.x = _fminf(rgb.x, rgb.z);
    if (redLightenWith_l == RLW_GREEN) rgb.x = _fmaxf(rgb.x, rgb.y); else if (redLightenWith_l == RLW_BLUE) rgb.x = _fmaxf(rgb.x, rgb.z);
    if (greenDarkenWith_l == GDW_RED) rgb.y = _fminf(rgb.y, rgb.x); else if (greenDarkenWith_l == GDW_BLUE) rgb.y = _fminf(rgb.y, rgb.z);
    if (greenLightenWith_l == GLW_RED) rgb.y = _fmaxf(rgb.y, rgb.x); else if (greenLightenWith_l == GLW_BLUE) rgb.y = _fmaxf(rgb.y, rgb.z);
    if (blueDarkenWith_l == BDW_RED) rgb.z = _fminf(rgb.z, rgb.x); else if (blueDarkenWith_l == BDW_GREEN) rgb.z = _fminf(rgb.z, rgb.y);
    if (blueLightenWith_l == BLW_RED) rgb.z = _fmaxf(rgb.z, rgb.x); else if (blueLightenWith_l == BLW_GREEN) rgb.z = _fmaxf(rgb.z, rgb.y);

    // --- 5. Copy (use local copy sources)
    if (copyRedSource_l == CR_FROM_GREEN) rgb.x = rgb.y; else if (copyRedSource_l == CR_FROM_BLUE) rgb.x = rgb.z;
    if (copyGreenSource_l == CG_FROM_RED) rgb.y = rgb.x; else if (copyGreenSource_l == CG_FROM_BLUE) rgb.y = rgb.z;
    if (copyBlueSource_l == CB_FROM_RED) rgb.z = rgb.x; else if (copyBlueSource_l == CB_FROM_GREEN) rgb.z = rgb.y;

    // --- 6. Removal (use local removal)
    if (channelRemovalMode_l == REM_RED || channelRemovalMode_l == REM_ALL) rgb.x = 0.0f;
    if (channelRemovalMode_l == REM_GREEN || channelRemovalMode_l == REM_ALL) rgb.y = 0.0f;
    if (channelRemovalMode_l == REM_BLUE || channelRemovalMode_l == REM_ALL) rgb.z = 0.0f;

    // --- 7. Output (use local flag)
    if (outputToCineon_l != 0) {
        rgb.x = linearToCineon(rgb.x);
        rgb.y = linearToCineon(rgb.y);
        rgb.z = linearToCineon(rgb.z);
    }
    return make_float4(rgb.x, rgb.y, rgb.z, p_A);
}
